module.exports = {
  configs: {
    recommended: {
      plugins: [
        'json',
        'import',
        'promise',
        'sonarjs',
        'prettier',
        'filenames',
      ],
      extends: [
        'eslint:recommended',
        'plugin:import/recommended',
        'plugin:import/typescript',
        'plugin:promise/recommended',
        'plugin:json/recommended-with-comments',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:prettier/recommended',
      ],
      rules: {
        'prettier/prettier': 'error',
        curly: 'error',
        eqeqeq: 'error',
        'no-var': 'error',
        'no-tabs': 'error',
        'no-empty': 'error',
        'no-console': 'error',
        'no-debugger': 'error',
        'sort-imports': 'off', // doesn't work well with 'import/order'
        'quote-props': ['error', 'as-needed'],
        quotes: ['error', 'single', { avoidEscape: true }],
        '@typescript-eslint/ban-types': 'error',
        '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
        '@typescript-eslint/no-inferrable-types': 'off',
        '@typescript-eslint/ban-ts-comment': [
          'error',
          {
            'ts-expect-error': true,
            'ts-ignore': false,
            'ts-nocheck': false,
            'ts-check': false,
          },
        ],
        '@typescript-eslint/no-namespace': [2, { allowDeclarations: true }],
        '@typescript-eslint/no-empty-function': 'error',
        '@typescript-eslint/no-extra-semi': 'error',
        '@typescript-eslint/no-shadow': 'error',
        '@typescript-eslint/no-unnecessary-type-constraint': 'off',
        '@typescript-eslint/no-non-null-assertion': 'error',
        '@typescript-eslint/require-await': 'error',
        '@typescript-eslint/promise-function-async': 'error',
        '@typescript-eslint/no-this-alias': 'error',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/no-useless-constructor': 'error',
        '@typescript-eslint/no-var-requires': 'error',
        '@typescript-eslint/prefer-as-const': 'error',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-unsafe-argument': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/restrict-plus-operands': 'error',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/no-unnecessary-type-assertion': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/strict-boolean-expressions': 'off',
        '@typescript-eslint/no-unnecessary-condition': 'off',
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
        '@typescript-eslint/no-empty-interface': ['error', { allowSingleExtends: true }],
        '@typescript-eslint/restrict-template-expressions': ['off'],
        '@typescript-eslint/no-floating-promises': [
          'error',
          {
            ignoreVoid: true,
            ignoreIIFE: true,
          },
        ],
        '@typescript-eslint/no-misused-promises': [
          'error',
          {
            checksConditionals: false,
            checksVoidReturn: false,
          },
        ],

        '@typescript-eslint/no-unused-vars': [
          'error',
          {
            varsIgnorePattern: '_',
            argsIgnorePattern: '_',
          },
        ],
        '@typescript-eslint/no-explicit-any': [
          'error',
          {
            ignoreRestArgs: false,
            fixToUnknown: false,
          },
        ],
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'typeLike',
            format: ['PascalCase'],
          },
        ],
        'no-empty-pattern': 'error',
        'prefer-rest-params': 'error',
        'no-async-promise-executor': 'error',
        'array-bracket-spacing': ['error', 'never'],
        'arrow-parens': ['error', 'always'],
        'block-spacing': ['error', 'always'],
        'comma-style': ['error', 'last'],
        'computed-property-spacing': ['error', 'never'],
        'default-param-last': 'error',
        'dot-location': ['error', 'property'],
        'dot-notation': 'error',
        'eslint-comments/no-unlimited-disable': 'error',
        'eslint-comments/no-unused-disable': 'error',
        'filenames/no-index': 'error',
        'func-call-spacing': 'off',
        'import/first': 'error',
        'import/export': 'error',
        'import/exports-last': 'off',
        'import/default': 'off',
        'import/no-dynamic-require': 'error',
        'import/no-unused-modules': 'error',
        'import/no-mutable-exports': 'error',
        'import/no-default-export': 'error',
        'import/no-duplicates': ['error', { considerQueryString: false }],
        'import/no-named-as-default': 'error',
        'import/no-unassigned-import': ['error', { allow: ['**/*.css'] }],
        'import/no-named-as-default-member': 'error',
        'no-constant-condition': 'error',
        'import/newline-after-import': ['error'],
        'import/no-useless-path-segments': [
          'error',
          {
            noUselessIndex: true,
          },
        ],
        'import/no-deprecated': 'warn',
        'import/order': [
          'error',
          {
            'newlines-between': 'always',
            warnOnUnassignedImports: true,
            pathGroupsExcludedImportTypes: ['builtin'],
            alphabetize: { order: 'asc', caseInsensitive: true },
            groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],
          },
        ],
        'local-rules/conditional-rendering': 'warn',
        'local-rules/disable-font-style': 'error',
        'local-rules/jsx-memoize': 'warn',
        'local-rules/analytics-props': 'error',
        'max-lines': ['error', { max: 250, skipComments: true, skipBlankLines: true }],
        'max-statements-per-line': [
          'error',
          {
            max: 2,
          },
        ],
        'max-lines-per-function': ['error', { max: 80, skipComments: true, skipBlankLines: true }],
        'max-nested-callbacks': ['warn', 3],
        'max-params': ['error', 3],
        'max-depth': ['error', 5],
        'no-return-await': 'error',
        'no-cond-assign': ['error', 'always'],
        'no-delete-var': 'error',
        'no-extra-boolean-cast': 'error',
        'no-extra-semi': 'off',
        'no-global-assign': 'error',
        'no-lonely-if': 'error',
        'no-nested-ternary': 'error',
        'no-param-reassign': 'off',
        'no-restricted-imports': 'off',
        'no-shadow': 'off',
        'no-template-curly-in-string': 'error',
        'no-trailing-spaces': 'error',
        'no-undef-init': 'error',
        'no-unreachable': 'error',
        'no-unused-vars': 'off',
        'no-useless-catch': 'error',
        'no-useless-concat': 'off',
        'no-useless-rename': 'error',
        'no-await-in-loop': 'error',
        'object-curly-spacing': ['error', 'always'],
        'object-shorthand': ['error', 'always'],
        'prefer-arrow-callback': ['error', { allowUnboundThis: false }],
        'prefer-const': 'error',
        'prefer-destructuring': [
          'error',
          {
            AssignmentExpression: { array: true, object: true },
            VariableDeclarator: { array: true, object: true },
          },
          { enforceForRenamedProperties: false },
        ],
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'promise/always-return': 'error',
        'promise/catch-or-return': 'error',
        'promise/prefer-await-to-then': 'error',
        'react/jsx-curly-brace-presence': 'error',
        'react-native/no-unused-styles': 'error',
        'react-native/no-inline-styles': 'error',
        'react/display-name': 'off',
        'react/jsx-handler-names': [
          'error',
          {
            eventHandlerPrefix: 'handle|set|on',
            eventHandlerPropPrefix: 'on',
            checkLocalVariables: true,
            checkInlineFunction: true,
          },
        ],
        'react/jsx-no-bind': 'error',
        'react/no-multi-comp': ['error', { ignoreStateless: true }],
        'react/prop-types': 'off',
        'react/react-in-jsx-scope': 'off',
        'react/self-closing-comp': 'off',
        'sonarjs/cognitive-complexity': 'error',
        'sonarjs/no-all-duplicated-branches': 'error',
        'sonarjs/no-collapsible-if': 'error',
        'sonarjs/no-collection-size-mischeck': 'error',
        'sonarjs/no-duplicated-branches': 'error',
        'sonarjs/no-element-overwrite': 'error',
        'sonarjs/no-empty-collection': 'error',
        'sonarjs/no-gratuitous-expressions': 'error',
        'sonarjs/no-identical-conditions': 'error',
        'sonarjs/no-identical-expressions': 'error',
        'sonarjs/no-ignored-return': 'error',
        'sonarjs/no-nested-template-literals': 'warn',
        'sonarjs/no-one-iteration-loop': 'error',
        'sonarjs/no-same-line-conditional': 'error',
        'sonarjs/no-small-switch': 'error',
        'sonarjs/no-use-of-empty-return-value': 'error',
        'sonarjs/prefer-while': 'error',
        'space-before-blocks': ['error', 'always'],
        'space-in-parens': ['error', 'never'],
        'spaced-comment': [
          'error',
          'always',
          {
            markers: ['/'],
          },
        ],
        'local-rules/export-match-filename': 'warn',
      },
    },
    react: {
      plugins: ['hooks'],
      extends: [
        'plugin:react/recommended',
      ],
    },
    'react-native': {
      env: {
        'react-native/react-native': true,
      },
      plugins: ['hooks', 'react-native'],
      extends: ['@react-native-community', 'plugin:react/recommended'],
    },
  },
};
